
Episode2
==============================

Q. What is node, npm, npx?
Ans. Node = runtime environment, Npm = package manager, Npx = package runner

Q. browserlist
Q. Why your react app is fast and optimized?

npm install -D parcel
-D flag is used for for install dependancy as a devDependencies
bundlers(webpack, parcel, veet) --> used for optimize, minify, ignite the application

parcle version(2.8.3)
tilder(~ --> Major version (3.0.0)), carret(^ --> for minor version updates automatically (2.8.4)) sign in package.json 

Difference between package.json and package.lock.json?
package.lock.json keeps track of adject version of dependecy when that is installed on machine

node_modules --> details (Tree of dependencies)

npm --> is not stand for pacakage manager (It's just used for managing the packages) also for installing packages (npm install -D parcel)
npx --> is used for execute any package (npx parcel index.html)
========================================================
Q1. What is localhost and how this is working ?
========================================================

Q2. Why getting react in our project using cdn is not a good way?
Because it's hitting extra network call instead you can install react package using (npm install react)
npm install react
npm install react-dom or npm i react-dom (i is short form of install)


========================================================
# Parcel
Parcel is a zero configuration web application bundler which includes support for JavaScript, CSS, HTML, and assets. It requires no build configuration and provides
- Dev Build
- Local server
- Hot Module Replacement(HMR)
- File watching Algorithm - written in c++
- Caching - Faster Builds
- Image Optimization
- Minification
- Building
- Compressing
- Consistent Hashing
- Source Mapping
- Differential Bundling -- support older browsers
- Diagnostic
- Error Handling
- Https
- Tree Shaking -- remove unused code
docs --> parceljs.org
=============================================================

From package.json remove main: .....;
before creating production ready build
-------------------------------------------------
npx parcel index.html (dev build)
npx parcel build index.html (production build)
-------------------------------------------------
npm run start //  npm start
npm run build // npm run build
============================================================
JSX --> HTML-like or XML-like syntax (is not html in react)


index.html
---------------------------------------------------------------
<body>
    <div id="root">
    </div>
    <script type="module" src="./App.js"></script>
    //type="module" is required 
</body>


App.js
---------------------------------------------------------------
import React from "react";
import ReactDOM from "react-dom/client";
const heading = React.createElement(
    "h1",
    { id: "heading" },
    "Namaste React!!"
)
const jsxHeading = <h1 id="heading"> Namaste React using JSX </h1>
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(jsxHeading);

vscode-icons  --> Extension for showing icon of files and folders
--------------------------------------------------------------------

# React Element not is Html Element , It's an object , When we render this to DOM then 
  this ReactElement becomes HTML element

  So, React Element is just a javascript object.

# JSX is a javascript synatx which is used for create ReactElement.
# JSX - is not HTML in Js (It's HTML-like or XML-like syntax)
# JSX (transpiled before it reaches the JS) - PARCEL - Babel

# React.createElement => ReactElement - Js Object => HtmlElement(render)
# JSX => React.createElement => ReactElement - JS Object => HtmlElement(render)
# Babel is a javascript compiler.

# In JSX className is equivalent to class attribute in HTML
# In JSX tabIndex is equivalent to tabindex attribute in HTML
# In JSX attribute name need to be written in CamelCase


# If you need to write JSX in multiple lines then just wrap your JSX code inside parenthesis